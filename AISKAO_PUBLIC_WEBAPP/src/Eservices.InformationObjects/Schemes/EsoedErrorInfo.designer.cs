// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.3.0.36516
//    <NameSpace>TechnoLogica.Eservices.ESOED.Common</NameSpace><Collection>Array</Collection><codeType>CSharp</codeType><EnableDataBinding>True</EnableDataBinding><EnableLasyLoading>False</EnableLasyLoading><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>True</EnableSummaryComment><IncludeSerializeMethod>True</IncludeSerializeMethod><UseBaseClass>True</UseBaseClass><GenerateCloneMethod>True</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net40</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><AutomaticProperties>False</AutomaticProperties><DisableDebug>True</DisableDebug><CustomUsings></CustomUsings><ExcludeIncludedTypes>False</ExcludeIncludedTypes><EnableInitializeFields>True</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace TechnoLogica.Eservices.ESOED.Common
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;


    #region Base entity class
    public partial class EntityBase<T> : System.ComponentModel.INotifyPropertyChanged
    {

        private static System.Xml.Serialization.XmlSerializer serializer;

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(T));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string info)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(info));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EntityBase object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EntityBase object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output EntityBase object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out T obj, out System.Exception exception)
        {
            exception = null;
            obj = default(T);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out T obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static T Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((T)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current EntityBase object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EntityBase object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EntityBase object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out T obj, out System.Exception exception)
        {
            exception = null;
            obj = default(T);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out T obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static T LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion

        #region Clone method
        /// <summary>
        /// Create a clone of this T object
        /// </summary>
        public virtual T Clone()
        {
            return ((T)(this.MemberwiseClone()));
        }
        #endregion
    }
    #endregion

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://esoed.egov.bg/2008/05/ErrorInfo/v1")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://esoed.egov.bg/2008/05/ErrorInfo/v1", IsNullable = false)]
    public partial class EsoedErrorInfo : EntityBase<EsoedErrorInfo>
    {

        private string documentURIField;

        private string documentTypeURIField;

        private string issuerURIField;

        private System.DateTime creationDateField;

        private EsoedErrorInfoTransportType transportTypeField;

        private EsoedErrorInfoError[] errorsField;

        public string DocumentURI
        {
            get
            {
                return this.documentURIField;
            }
            set
            {
                if ((this.documentURIField != null))
                {
                    if ((documentURIField.Equals(value) != true))
                    {
                        this.documentURIField = value;
                        this.OnPropertyChanged("DocumentURI");
                    }
                }
                else
                {
                    this.documentURIField = value;
                    this.OnPropertyChanged("DocumentURI");
                }
            }
        }

        public string DocumentTypeURI
        {
            get
            {
                return this.documentTypeURIField;
            }
            set
            {
                if ((this.documentTypeURIField != null))
                {
                    if ((documentTypeURIField.Equals(value) != true))
                    {
                        this.documentTypeURIField = value;
                        this.OnPropertyChanged("DocumentTypeURI");
                    }
                }
                else
                {
                    this.documentTypeURIField = value;
                    this.OnPropertyChanged("DocumentTypeURI");
                }
            }
        }

        public string IssuerURI
        {
            get
            {
                return this.issuerURIField;
            }
            set
            {
                if ((this.issuerURIField != null))
                {
                    if ((issuerURIField.Equals(value) != true))
                    {
                        this.issuerURIField = value;
                        this.OnPropertyChanged("IssuerURI");
                    }
                }
                else
                {
                    this.issuerURIField = value;
                    this.OnPropertyChanged("IssuerURI");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(DataType = "date")]
        public System.DateTime CreationDate
        {
            get
            {
                return this.creationDateField;
            }
            set
            {
                if ((creationDateField.Equals(value) != true))
                {
                    this.creationDateField = value;
                    this.OnPropertyChanged("CreationDate");
                }
            }
        }

        public EsoedErrorInfoTransportType TransportType
        {
            get
            {
                return this.transportTypeField;
            }
            set
            {
                if ((transportTypeField.Equals(value) != true))
                {
                    this.transportTypeField = value;
                    this.OnPropertyChanged("TransportType");
                }
            }
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("Error", IsNullable = false)]
        public EsoedErrorInfoError[] Errors
        {
            get
            {
                return this.errorsField;
            }
            set
            {
                if ((this.errorsField != null))
                {
                    if ((errorsField.Equals(value) != true))
                    {
                        this.errorsField = value;
                        this.OnPropertyChanged("Errors");
                    }
                }
                else
                {
                    this.errorsField = value;
                    this.OnPropertyChanged("Errors");
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://esoed.egov.bg/2008/05/ErrorInfo/v1")]
    public enum EsoedErrorInfoTransportType
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Пренос през ЕСОЕД")]
        ПреноспрезЕСОЕД,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://esoed.egov.bg/2008/05/ErrorInfo/v1")]
    public partial class EsoedErrorInfoError : EntityBase<EsoedErrorInfoError>
    {

        private string textField;

        public string Text
        {
            get
            {
                return this.textField;
            }
            set
            {
                if ((this.textField != null))
                {
                    if ((textField.Equals(value) != true))
                    {
                        this.textField = value;
                        this.OnPropertyChanged("Text");
                    }
                }
                else
                {
                    this.textField = value;
                    this.OnPropertyChanged("Text");
                }
            }
        }
    }
}
